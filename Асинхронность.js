console.log('Start'); // Синхронно
// Закидывается в callStack выполняется и пропадает
console.log('Start2'); // Синхронно
// Закидывается в callStack выполняется и пропадает
setTimeout(() => {
  console.log('popa');
}, 4000); // асинхронно.
// Появляется в коллстэке что бы зарегестрировать. Далее попадает
// в WebApi Когда проходит 4 секунды у вэбапи данная функция попадает
// в Callback Queue где и находится EventLoop.  Где просто проходит
// циклом по очереди и закидывает обратно в callstack

// EventLoop регистрирует эту функцию и ждет 4
// секунды, пока он ждет код выполняется дальше
// Поток не блокируется именно из зи EventLoop
// Программа бежит по строчкам, когда доходит до сет таймаут закидывает его
// в стек, в стеке начинает смотреть, что есть сет таймаут но сохряняет
// его внутренний консоль лог. И ждет пока сет таймаут выполнится. И когда
// он выполниться функция попадает в очередь, и когда очередь подходит он
// закидывает функцию обратно в стек. И выполняет функцию

console.log('end'); // получим первее чем сет таймаут


// ########## Пример

console.log(1);

setTimeout(() => {
    console.log('inside timeot');
}, 0)

console.log(2);